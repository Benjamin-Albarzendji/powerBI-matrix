import { GridOptions } from 'ag-grid-community';
import 'ag-grid-community/styles/ag-grid.css';
import powerbi from 'powerbi-visuals-api';
import ISelectionManager = powerbi.extensibility.ISelectionManager;
export declare class Matrix {
    static columnDefs: any[];
    static rowData: any[];
    static selectionManager: ISelectionManager;
    static host: any;
    static formattingSettings: any;
    static dataView: any;
    static rowLevels: powerbi.DataViewHierarchyLevel[];
    static columnLevels: powerbi.DataViewHierarchyLevel[];
    static rowChildren: powerbi.DataViewMatrixNode[];
    static columnChildren: powerbi.DataViewMatrixNode[];
    static rowChildrenNodes: any[];
    static rowChildrenNodesSorted: any[];
    static nodesToExpand: any[];
    static expandUpwards: boolean;
    static tempRowChildren: any[];
    static gridOptions: GridOptions;
    private static selectOnClick;
    private static traverseSelection;
    static populateMatrixInformation(dataView: powerbi.DataView, selectionManager: any, host: any, formattingSettings: any): HTMLElement;
    private static formatMatrix;
    private static traverseChildNodes;
    private static addBodyEventListeners;
    private static addHeaderEventListeners;
    private static addSelectionEventListener;
    private static addContextMenuEventListener;
    private static addSortingEventlistener;
    static clearGrid(): void;
    private static visualMapping;
    private static expansionTraverser;
    private static expansionTraverserHelper;
    private static rowMapping;
    private static AddExpandButtons;
    private static startExpansion;
    private static formatExpandedRows;
    private static formatRows;
    private static formatRowHeaders;
    private static formatColumns;
    private static valueFormatterMatrix;
    private static formatColHeaders;
    private static formatSpecificRows;
    private static formatSpecificColumns;
}
